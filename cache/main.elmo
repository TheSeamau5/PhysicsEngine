Elm.Main = Elm.Main || {};
Elm.Main.make = function (_elm) {
   "use strict";
   _elm.Main = _elm.Main || {};
   if (_elm.Main.values)
   return _elm.Main.values;
   var _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   _E = _N.Error.make(_elm),
   _J = _N.JavaScript.make(_elm),
   $moduleName = "Main";
   var Basics = Elm.Basics.make(_elm);
   var Color = Elm.Color.make(_elm);
   var Graphics = Graphics || {};
   Graphics.Collage = Elm.Graphics.Collage.make(_elm);
   var Graphics = Graphics || {};
   Graphics.Element = Elm.Graphics.Element.make(_elm);
   var Keyboard = Elm.Keyboard.make(_elm);
   var List = Elm.List.make(_elm);
   var Maybe = Elm.Maybe.make(_elm);
   var Native = Native || {};
   Native.Ports = Elm.Native.Ports.make(_elm);
   var Physics = Physics || {};
   Physics.Body = Elm.Physics.Body.make(_elm);
   var Physics = Physics || {};
   Physics.Math = Physics.Math || {};
   Physics.Math.Point = Elm.Physics.Math.Point.make(_elm);
   var Signal = Elm.Signal.make(_elm);
   var String = Elm.String.make(_elm);
   var Text = Elm.Text.make(_elm);
   var Time = Elm.Time.make(_elm);
   var _op = {};
   var updatePhysics = Signal.foldp(Physics.Body.applyForceNow);
   var getInput = A2(Signal.lift,
   Physics.Math.Point.scaleBy(100),
   A2(Signal.lift,
   Physics.Math.Point.toFloatPoint,
   Keyboard.arrows));
   var drawBody = function (body) {
      return A3(Graphics.Collage.collage,
      400,
      400,
      _J.toList([A2(Graphics.Collage.move,
      {ctor: "_Tuple2"
      ,_0: body.position.x
      ,_1: body.position.y},
      A2(Graphics.Collage.filled,
      Color.red,
      Graphics.Collage.circle(50)))]));
   };
   var render = function (body) {
      return A2(Signal.lift,
      drawBody,
      body);
   };
   var update = function (body) {
      return render(updatePhysics(body)(getInput));
   };
   var hero = A3(Physics.Body.dynamicBody,
   50,
   Physics.Math.Point.origin,
   Physics.Math.Point.origin);
   var main = update(hero);
   _elm.Main.values = {_op: _op
                      ,hero: hero
                      ,drawBody: drawBody
                      ,render: render
                      ,getInput: getInput
                      ,updatePhysics: updatePhysics
                      ,update: update
                      ,main: main};
   return _elm.Main.values;
};