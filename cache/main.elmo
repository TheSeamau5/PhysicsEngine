Elm.Main = Elm.Main || {};
Elm.Main.make = function (_elm) {
   "use strict";
   _elm.Main = _elm.Main || {};
   if (_elm.Main.values)
   return _elm.Main.values;
   var _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   _E = _N.Error.make(_elm),
   _J = _N.JavaScript.make(_elm),
   $moduleName = "Main";
   var Basics = Elm.Basics.make(_elm);
   var Color = Elm.Color.make(_elm);
   var Graphics = Graphics || {};
   Graphics.Collage = Elm.Graphics.Collage.make(_elm);
   var Graphics = Graphics || {};
   Graphics.Element = Elm.Graphics.Element.make(_elm);
   var Keyboard = Elm.Keyboard.make(_elm);
   var List = Elm.List.make(_elm);
   var Maybe = Elm.Maybe.make(_elm);
   var Native = Native || {};
   Native.Ports = Elm.Native.Ports.make(_elm);
   var Physics = Physics || {};
   Physics.Body = Elm.Physics.Body.make(_elm);
   var Physics = Physics || {};
   Physics.Collider = Elm.Physics.Collider.make(_elm);
   var Physics = Physics || {};
   Physics.Math = Physics.Math || {};
   Physics.Math.Point = Elm.Physics.Math.Point.make(_elm);
   var Signal = Elm.Signal.make(_elm);
   var String = Elm.String.make(_elm);
   var Text = Elm.Text.make(_elm);
   var Time = Elm.Time.make(_elm);
   var _op = {};
   var getInput = A3(Signal.foldp,
   F2(function (x,y) {
      return A2(Physics.Math.Point._op["<+>"],
      x,
      y);
   }),
   Physics.Math.Point.origin,
   A2(Signal.lift,
   Physics.Math.Point.toFloatPoint,
   Keyboard.arrows));
   var updateObject = F2(function (obj,
   p) {
      return _U.replace([["collider"
                         ,A3(Physics.Collider.collider,
                         obj.body.position,
                         obj.collider.width,
                         obj.collider.height)]
                        ,["body"
                         ,A2(Physics.Body.applyForceNow,
                         p,
                         obj.body)]],
      obj);
   });
   var drawGameObject = function (gameObject) {
      return A2(Graphics.Collage.move,
      {ctor: "_Tuple2"
      ,_0: gameObject.collider.center.x
      ,_1: gameObject.collider.center.y},
      A2(Graphics.Collage.filled,
      gameObject.color,
      A2(Graphics.Collage.rect,
      gameObject.collider.width,
      gameObject.collider.height)));
   };
   var drawScene = F2(function (width,
   height) {
      return function ($) {
         return A2(Graphics.Collage.collage,
         width,
         height)(List.map(drawGameObject)($));
      };
   });
   var render = Signal.lift(A2(drawScene,
   400,
   400));
   var gameObject = F3(function (collider,
   body,
   color) {
      return {_: {}
             ,body: body
             ,collider: collider
             ,color: color};
   });
   var squareObject = F4(function (color,
   mass,
   center,
   size) {
      return A3(gameObject,
      A3(Physics.Collider.collider,
      center,
      size,
      size),
      A3(Physics.Body.dynamicBody,
      mass,
      center,
      Physics.Math.Point.origin),
      color);
   });
   var hero = A4(squareObject,
   Color.blue,
   50,
   A2(Physics.Math.Point.point,
   50,
   50),
   50);
   var GameObject = F3(function (a,
   b,
   c) {
      return {_: {}
             ,body: b
             ,collider: a
             ,color: c};
   });
   var removeNth = F2(function (n,
   list) {
      return _L.append(A2(List.take,
      n - 1,
      list),
      A2(List.drop,n,list));
   });
   var takeNth = function (n) {
      return function ($) {
         return List.last(List.take(n)($));
      };
   };
   var applyNth = F3(function (n,
   f,
   list) {
      return A2(List.map,
      function ($) {
         return f(takeNth(n)($));
      }(list),
      A2(removeNth,n,list));
   });
   var toList = A2(Basics.flip,
   F2(function (x,y) {
      return {ctor: "::"
             ,_0: x
             ,_1: y};
   }),
   _J.toList([]));
   var updatePhysics = F2(function (obj,
   p) {
      return A2(Signal.lift,
      toList,
      A3(Signal.foldp,
      Basics.flip(updateObject),
      obj,
      p));
   });
   var update = function (obj) {
      return render(updatePhysics(obj)(getInput));
   };
   var main = update(hero);
   var swap2_3 = F4(function (f,
   x,
   y,
   z) {
      return A3(f,x,z,y);
   });
   var swap3_2 = swap2_3;
   var swap1_3 = F4(function (f,
   x,
   y,
   z) {
      return A3(f,z,y,x);
   });
   var swap3_1 = swap1_3;
   var toFront_3 = swap2_3(swap1_3);
   var applyAll = F2(function (f,
   list) {
      return A2(List.map,
      A3(toFront_3,applyNth,f,list),
      _L.range(1,List.length(list)));
   });
   var swap1_2 = Basics.flip;
   var swap2_1 = swap1_2;
   var toFront_2 = swap1_2;
   var toBack_2 = swap1_2;
   var toBack_3 = function ($) {
      return swap1_2(swap2_3($));
   };
   _elm.Main.values = {_op: _op
                      ,swap1_2: swap1_2
                      ,swap1_3: swap1_3
                      ,swap2_1: swap2_1
                      ,swap2_3: swap2_3
                      ,swap3_1: swap3_1
                      ,swap3_2: swap3_2
                      ,toFront_2: toFront_2
                      ,toFront_3: toFront_3
                      ,toBack_2: toBack_2
                      ,toBack_3: toBack_3
                      ,toList: toList
                      ,takeNth: takeNth
                      ,removeNth: removeNth
                      ,applyNth: applyNth
                      ,applyAll: applyAll
                      ,gameObject: gameObject
                      ,squareObject: squareObject
                      ,drawGameObject: drawGameObject
                      ,drawScene: drawScene
                      ,hero: hero
                      ,render: render
                      ,updateObject: updateObject
                      ,updatePhysics: updatePhysics
                      ,getInput: getInput
                      ,update: update
                      ,main: main
                      ,GameObject: GameObject};
   return _elm.Main.values;
};