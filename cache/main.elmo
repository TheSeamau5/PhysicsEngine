Elm.Main = Elm.Main || {};
Elm.Main.make = function (_elm) {
   "use strict";
   _elm.Main = _elm.Main || {};
   if (_elm.Main.values)
   return _elm.Main.values;
   var _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   _E = _N.Error.make(_elm),
   _J = _N.JavaScript.make(_elm),
   $moduleName = "Main";
   var Basics = Elm.Basics.make(_elm);
   var Color = Elm.Color.make(_elm);
   var Graphics = Graphics || {};
   Graphics.Collage = Elm.Graphics.Collage.make(_elm);
   var Graphics = Graphics || {};
   Graphics.Element = Elm.Graphics.Element.make(_elm);
   var Keyboard = Elm.Keyboard.make(_elm);
   var List = Elm.List.make(_elm);
   var Maybe = Elm.Maybe.make(_elm);
   var Native = Native || {};
   Native.Ports = Elm.Native.Ports.make(_elm);
   var Physics = Physics || {};
   Physics.Body = Elm.Physics.Body.make(_elm);
   var Physics = Physics || {};
   Physics.Collider = Elm.Physics.Collider.make(_elm);
   var Physics = Physics || {};
   Physics.Math = Physics.Math || {};
   Physics.Math.Point = Elm.Physics.Math.Point.make(_elm);
   var Physics = Physics || {};
   Physics.Physic = Elm.Physics.Physic.make(_elm);
   var Signal = Elm.Signal.make(_elm);
   var String = Elm.String.make(_elm);
   var Text = Elm.Text.make(_elm);
   var Time = Elm.Time.make(_elm);
   var _op = {};
   var getInput = function (hero) {
      return function () {
         switch (hero.ctor)
         {case "CircleCollider":
            return A3(Signal.lift2,
              Physics.Collider.circleCollider,
              A3(Signal.foldp,
              F2(function (x,y) {
                 return A2(Physics.Math.Point._op["<+>"],
                 x,
                 y);
              }),
              hero._0.center,
              A2(Signal.lift,
              Physics.Math.Point.scaleBy(10),
              A2(Signal.lift,
              Physics.Math.Point.toFloatPoint,
              Keyboard.arrows))),
              Signal.constant(hero._0.radius));}
         return Signal.constant(hero);
      }();
   };
   var render = F2(function (collider1,
   collider2) {
      return function () {
         var colliderColor = function () {
            var _v2 = A2(Physics.Collider.collide,
            collider1,
            collider2);
            switch (_v2)
            {case false: return Color.green;
               case true: return Color.red;}
            _E.Case($moduleName,
            "between lines 14 and 17");
         }();
         return A3(Graphics.Collage.collage,
         400,
         400,
         _J.toList([A2(Physics.Collider.drawCollider,
                   colliderColor,
                   collider1)
                   ,A2(Physics.Collider.drawCollider,
                   colliderColor,
                   collider2)]));
      }();
   });
   var update = F2(function (hero,
   test) {
      return A2(Signal.lift2,
      render,
      Signal.constant(test))(getInput(hero));
   });
   var bar = A2(Physics.Collider.circleCollider,
   A2(Physics.Math.Point.point,
   -50,
   0),
   50);
   var foo = A2(Physics.Collider.circleCollider,
   Physics.Math.Point.origin,
   50);
   var main = A2(update,foo,bar);
   _elm.Main.values = {_op: _op
                      ,foo: foo
                      ,bar: bar
                      ,render: render
                      ,getInput: getInput
                      ,update: update
                      ,main: main};
   return _elm.Main.values;
};